e2e/

Inside e2e/ live the end-to-end tests. They shouldn't be inside src/ because e2e tests are really a separate app that just so happens to test your main app. That's also why they have their own tsconfig.e2e.json.

node_modules/

Node.js creates this folder and puts all third party modules listed in package.json inside of it.

.angular-cli.json

Configuration for Angular CLI. In this file you can set several defaults and also configure what files are included when your project is built. Check out the official documentation if you want to know more.

.editorconfig

Simple configuration for your editor to make sure everyone that uses your project has the same basic configuration. Most editors support an .editorconfig file. See http://editorconfig.org for more information.

.gitignore

Git configuration to make sure autogenerated files are not commited to source control.

karma.conf.js

Unit test configuration for the Karma test runner, used when running ng test.

package.json

npm configuration listing the third party packages your project uses. You can also add your own custom scripts here.

protractor.conf.js

End-to-end test configuration for Protractor, used when running ng e2e.

README.md

Basic documentation for your project, pre-filled with CLI command information. Make sure to enhance it with project documentation so that anyone checking out the repo can build your app!

tsconfig.json

TypeScript compiler configuration for your IDE to pick up and give you helpful tooling.

tslint.json

Linting configuration for TSLint together with Codelyzer, used when running ng lint. Linting helps keep your code style consistent.




Lifecycle Hooks
----------------
A component in Angular has a life-cycle, a number of different phases it goes through from birth to death.
The hooks are executed in this order:

constructor:-This is invoked when Angular creates a component or directive by calling new on the class.

ngOnChanges:-Invoked every time there is a change in one of th input properties of the component.

ngOnInit:-Invoked when given component has been initialized.
This hook is only called once after the first ngOnChanges

ngDoCheck:-Invoked when the change detector of the given component is invoked. It allows us to implement our own change detection algorithm for the given component.

ngOnDestroy:-This method will be invoked just before Angular destroys the component.
Use this hook to unsubscribe observables and detach event handlers to avoid memory leaks.

Important

ngDoCheck and ngOnChanges should not be implemented together on the same component.
Hooks for the components children:These hooks are only called for components and not directives.

ngAfterContentInit:-Invoked after Angular performs any content projection into the components view

ngAfterContentChecked:-Invoked each time the content of the given component has been checked by the change detection mechanism of Angular.

ngAfterViewInit:-Invoked when the componentâ€™s view has been fully initialized.

ngAfterViewChecked:-Invoked each time the view of the given component has been checked by the change detection mechanism of Angular.